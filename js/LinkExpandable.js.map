{"version":3,"names":[],"mappings":"","sources":["LinkExpandable.js"],"sourcesContent":["class LinkExpandable {\n    constructor(elements, props = {}) {\n        this.linkElement = elements.linkElement;\n        this.expandableElement = elements.expandableElement;\n        this.backButton = elements.mobileBackButton;\n        this.mobile = props.mobile;\n        this.bind();\n    }\n\n    expand() {\n        if (this.linkElement.getAttribute('aria-expanded') !== 'true') {\n            this.linkElement.setAttribute('aria-expanded', 'true');\n            this.linkElement.focus();\n            this.linkElement.dispatchEvent(new CustomEvent('expanded', {bubbles: true, detail: {menu: this}}));\n        }\n    }\n\n    minimize() {\n        if (this.linkElement.getAttribute('aria-expanded') !== 'false') {\n            this.linkElement.setAttribute('aria-expanded', 'false');\n            this.linkElement.dispatchEvent(new CustomEvent('minimized', {bubbles: true, detail: {menu: this}}));\n        }\n    }\n\n    bind() {\n        const component = this;\n\n        document.addEventListener('keydown', function (event) {\n            let isEscape = false;\n\n            if (\"key\" in event) {\n                isEscape = (event.key === \"Escape\" || event.key === \"Esc\");\n            }\n            if (isEscape) {\n                component.minimize();\n                //if we were focused on a expandableElement child, move focus back up to the button\n                if (component.expandableElement.contains(document.activeElement)) {\n                    component.linkElement.focus();\n                }\n            }\n        });\n\n        if (this.mobile){\n            component.backButton.addEventListener('click', function(event){\n                component.minimize();\n            });\n        }\n\n        if(!this.mobile){\n            document.addEventListener('click', function(event){\n                if(component.expandableElement.contains(event.target) || component.linkElement.contains(event.target) ){\n                    //event.stopPropagation();\n                } else{\n                    component.minimize();\n                }\n\n            });\n        }\n\n        this.linkElement.addEventListener('keydown', function (event) {\n            console.log('link keydown')\n            if (\"key\" in event) {\n                switch (event.key) {\n                    case 'Enter':\n                        component.expand();\n                        break;\n                    case 'ArrowDown':\n                        component.expand();\n                        component.expandableElement.querySelector(\"a\").focus();\n                        break;\n                    case 'Tab':\n                        if (event.shiftKey){\n                            //We're tabbing back from this menu item, minimize\n                            component.minimize();\n                        }\n                }\n            }\n        });\n\n        this.expandableElement.addEventListener('keydown', function (event) {\n            if (\"key\" in event) {\n                switch (event.key) {\n                    case 'ArrowUp':\n                        component.focusLink(-1)\n                        break;\n                    case 'ArrowDown':\n                        component.focusLink(1)\n                        break;\n                }\n            }\n        });\n\n        //mousedown\n        this.linkElement.addEventListener('click', function (event) {\n            let ariaExpanded = component.linkElement.getAttribute('aria-expanded');\n            ariaExpanded === \"true\" ? component.minimize() : component.expand();\n            //event.stopPropagation();\n        });\n\n        this.expandableElement.addEventListener('focusout', function (event) {\n            setTimeout(function () {\n                if (component.linkElement !== document.activeElement && !component.expandableElement.contains(document.activeElement)) {\n                    component.minimize();\n                }\n            }, 1);\n        });\n    }\n\n    //todo: This won't accommodate non-anchor targets, like buttons or a form.\n    focusLink(offset) {\n        const component = this;\n        let links = this.expandableElement.querySelectorAll('a');\n        Array.from(links).some(function (link, i) {\n            if (link === document.activeElement) {\n                if (links[i + offset]) {\n                    links[i + offset].focus();\n                    return true;\n                } else {\n                    component.linkElement.focus();\n                }\n            }\n        });\n    }\n}"],"file":"LinkExpandable.js"}