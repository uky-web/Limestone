{"version":3,"names":[],"mappings":"","sources":["accordion-panel/jquery-accessible-accordion.js"],"sourcesContent":["/*\n * jQuery Accessible Accordion system, using ARIA\n * @version v2.5.2\n * Website: https://a11y.nicolas-hoffmann.net/accordion/\n * License MIT: https://github.com/nico3333fr/jquery-accessible-accordion-aria/blob/master/LICENSE\n */\n(function(factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports !== 'undefined') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(window.jQuery);\n    }\n}(function($) {\n    'use strict';\n\n    var defaultConfig = {\n        headersSelector: '.js-accordion__header',\n        panelsSelector: '.js-accordion__panel',\n        buttonsSelector: 'button.js-accordion__header',\n        buttonsGeneratedContent: 'text',\n        button: $('<button></button>', {\n            class: 'js-accordion__header',\n            type: 'button'\n        }),\n        buttonSuffixId: '_tab',\n        multiselectable: true,\n        prefixClass: 'accordion',\n        headerSuffixClass: '__title',\n        buttonSuffixClass: '__header',\n        panelSuffixClass: '__panel',\n        direction: 'ltr',\n        accordionPrefixId: 'accordion'\n    };\n\n    var Accordion = function($el, options) {\n        this.options = $.extend({}, defaultConfig, options);\n\n        this.$wrapper = $el;\n        this.$panels = $(this.options.panelsSelector, this.$wrapper);\n\n        this.initAttributes();\n        this.initEvents();\n    };\n\n    Accordion.prototype.initAttributes = function() {\n        this.$wrapper.attr({\n            'role': 'tablist',\n            'aria-multiselectable': this.options.multiselectable.toString()\n        }).addClass(this.options.prefixClass);\n\n        // id generated if not present\n        if (!this.$wrapper.attr('id')) {\n            var index_lisible = Math.random().toString(32).slice(2, 12);\n            this.$wrapper.attr('id', this.options.accordionPrefixId + '-' + index_lisible);\n        }\n\n        this.$panels.each($.proxy(function(index, el) {\n            var $panel = $(el);\n            var $header = $(this.options.headersSelector, $panel);\n            var $button = this.options.buttonsGeneratedContent === 'html' ? this.options.button.clone().html($header.html()) : this.options.button.clone().text($header.text());\n\n            $header.attr('tabindex', '0').addClass(this.options.prefixClass + this.options.headerSuffixClass);\n            $panel.before($button);\n\n            var panelId = $panel.attr('id') || this.$wrapper.attr('id') + '-' + index;\n            var buttonId = panelId + this.options.buttonSuffixId;\n\n            $button.attr({\n                'aria-controls': panelId,\n                'aria-expanded': 'false',\n                'role': 'tab',\n                'id': buttonId,\n                'tabindex': '-1',\n                'aria-selected': 'false'\n            }).addClass(this.options.prefixClass + this.options.buttonSuffixClass);\n\n            $panel.attr({\n                'aria-labelledby': buttonId,\n                'role': 'tabpanel',\n                'id': panelId,\n                'aria-hidden': 'true'\n            }).addClass(this.options.prefixClass + this.options.panelSuffixClass);\n\n            // if opened by default\n            if ($panel.attr('data-accordion-opened') === 'true') {\n                $button.attr({\n                    'aria-expanded': 'true',\n                    'data-accordion-opened': null\n                });\n\n                $panel.attr({\n                    'aria-hidden': 'false'\n                });\n            }\n\n            // init first one focusable\n            if (index === 0) {\n                $button.removeAttr('tabindex');\n            }\n        }, this));\n\n        this.$buttons = $(this.options.buttonsSelector, this.$wrapper);\n    };\n\n    Accordion.prototype.initEvents = function() {\n        this.$wrapper.on('focus', this.options.buttonsSelector, $.proxy(this.focusButtonEventHandler, this));\n\n        this.$wrapper.on('click', this.options.buttonsSelector, $.proxy(this.clickButtonEventHandler, this));\n\n        this.$wrapper.on('keydown', this.options.buttonsSelector, $.proxy(this.keydownButtonEventHandler, this));\n\n        this.$wrapper.on('keydown', this.options.panelsSelector, $.proxy(this.keydownPanelEventHandler, this));\n    };\n\n    Accordion.prototype.focusButtonEventHandler = function(e) {\n        var $target = $(e.target);\n        var $button = $target.is('button') ? $target : $target.closest('button');\n\n        $(this.options.buttonsSelector, this.$wrapper).attr({\n            'tabindex': '-1',\n            'aria-selected': 'false'\n        });\n\n        $button.attr({\n            'aria-selected': 'true',\n            'tabindex': null\n        });\n    };\n\n    Accordion.prototype.clickButtonEventHandler = function(e) {\n        var $target = $(e.target);\n        var $button = $target.is('button') ? $target : $target.closest('button');\n        var $panel = $('#' + $button.attr('aria-controls'));\n\n        this.$buttons.attr('aria-selected', 'false');\n        $button.attr('aria-selected', 'true');\n\n        // opened or closed?\n        if ($button.attr('aria-expanded') === 'false') { // closed\n            $button.attr('aria-expanded', 'true');\n            $panel.attr('aria-hidden', 'false');\n        } else { // opened\n            $button.attr('aria-expanded', 'false');\n            $panel.attr('aria-hidden', 'true');\n        }\n\n        if (this.options.multiselectable === false) {\n            this.$panels.not($panel).attr('aria-hidden', 'true');\n            this.$buttons.not($button).attr('aria-expanded', 'false');\n        }\n\n        setTimeout(function() {\n            $button.focus();\n        }, 0);\n\n        e.stopPropagation();\n        e.preventDefault();\n    };\n\n    Accordion.prototype.keydownButtonEventHandler = function(e) {\n        var $target = $(e.target);\n        var $button = $target.is('button') ? $target : $target.closest('button');\n        var $firstButton = this.$buttons.first();\n        var $lastButton = this.$buttons.last();\n        var index = this.$buttons.index($button);\n\n        $target = null;\n\n        var k = this.options.direction === 'ltr' ? {\n            prev: [38, 37], // up & left\n            next: [40, 39], // down & right\n            first: 36, // home\n            last: 35 // end\n        } : {\n            prev: [38, 39], // up & left\n            next: [40, 37], // down & right\n            first: 36, // home\n            last: 35 // end\n        };\n\n        var allKeyCode = [].concat(k.prev, k.next, k.first, k.last);\n\n        if ($.inArray(e.keyCode, allKeyCode) >= 0 && !e.ctrlKey) {\n            this.$buttons.attr({\n                'tabindex': '-1',\n                'aria-selected': 'false'\n            });\n\n\n            if (e.keyCode === 36) {\n                $target = $firstButton;\n            }\n            // strike end in the tab => last tab\n            else if (e.keyCode === 35) {\n                $target = $lastButton;\n            }\n            // strike up or left in the tab => previous tab\n            else if ($.inArray(e.keyCode, k.prev) >= 0) {\n                // if we are on first one, activate last\n                $target = $button.is($firstButton) ? $lastButton : this.$buttons.eq(index - 1);\n            }\n            // strike down or right in the tab => next tab\n            else if ($.inArray(e.keyCode, k.next) >= 0) {\n                // if we are on last one, activate first\n                $target = $button.is($lastButton) ? $firstButton : this.$buttons.eq(index + 1);\n            }\n\n            if ($target !== null) {\n                this.goToHeader($target);\n            }\n\n            e.preventDefault();\n        }\n    };\n\n    Accordion.prototype.keydownPanelEventHandler = function(e) {\n        var $panel = $(e.target).closest(this.options.panelsSelector);\n        var $button = $('#' + $panel.attr('aria-labelledby'));\n        var $firstButton = this.$buttons.first();\n        var $lastButton = this.$buttons.last();\n        var index = this.$buttons.index($button);\n        var $target = null;\n\n        // strike up + ctrl => go to header\n        if (e.keyCode === 38 && e.ctrlKey) {\n            $target = $button;\n        }\n        // strike pageup + ctrl => go to prev header\n        else if (e.keyCode === 33 && e.ctrlKey) {\n            $target = $button.is($firstButton) ? $lastButton : this.$buttons.eq(index - 1);\n        }\n        // strike pagedown + ctrl => go to next header\n        else if (e.keyCode === 34 && e.ctrlKey) {\n            $target = $button.is($lastButton) ? $firstButton : this.$buttons.eq(index + 1);\n        }\n\n        if ($target !== null) {\n            this.goToHeader($target);\n            e.preventDefault();\n        }\n    };\n\n    Accordion.prototype.goToHeader = function($target) {\n        if ($target.length !== 1) {\n            return;\n        }\n\n        $target.attr({\n            'aria-selected': 'true',\n            'tabindex': null\n        });\n\n        setTimeout(function() {\n            $target.focus();\n        }, 0);\n    };\n\n\n    var PLUGIN = 'accordion';\n\n    $.fn[PLUGIN] = function(params) {\n        var options = $.extend({}, $.fn[PLUGIN].defaults, params);\n\n\n        return this.each(function() {\n            var $el = $(this);\n\n            var specificOptions = {\n                multiselectable: $el.attr('data-accordion-multiselectable') === 'none' ? false : options.multiselectable,\n                prefixClass: typeof($el.attr('data-accordion-prefix-classes')) !== 'undefined' ? $el.attr('data-accordion-prefix-classes') : options.prefixClass,\n                buttonsGeneratedContent: typeof($el.attr('data-accordion-button-generated-content')) !== 'undefined' ? $el.attr('data-accordion-button-generated-content') : options.buttonsGeneratedContent,\n                direction: $el.closest('[dir=\"rtl\"]').length > 0 ? 'rtl' : options.direction\n            };\n            specificOptions = $.extend({}, options, specificOptions);\n\n            $el.data[PLUGIN] = new Accordion($el, specificOptions); \n        });\n    };\n\n    $.fn[PLUGIN].defaults = defaultConfig;\n\n}));\n"],"file":"jquery-accessible-accordion.js"}