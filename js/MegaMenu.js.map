{"version":3,"names":[],"mappings":"","sources":["MegaMenu.js"],"sourcesContent":["let domReady = function (callback) {\n    document.readyState === \"interactive\" || document.readyState === \"complete\" ? callback() : document.addEventListener(\"DOMContentLoaded\", callback);\n};\n\n\nclass MegaMenu {\n\n    constructor(rootElement, props) {\n        this.root = rootElement;\n        this.mobile = props.mobile;\n        this.menus = [];\n        Array.from(this.root.querySelectorAll(props.buttonSelector)).forEach(link => {\n            let menuButton = link;\n            let menuContainer = link.nextElementSibling;\n            let mobileBack = menuContainer.querySelector(props.mobileBackSelector);\n            let menuObj = new LinkExpandable({linkElement:menuButton, expandableElement: menuContainer, mobileBackButton:mobileBack}, {mobile:props.mobile});\n            this.menus.push(menuObj);\n        });\n        this.bind();\n    }\n\n    bind() {\n        //UIEvents\n        const component = this;\n\n        //CustomEvents\n        //Bubbled from ExpandableMenu\n        this.root.addEventListener('expanded', function (event) {\n            let expandedMenu = event.detail.menu;\n            component.menus.forEach(function (menu) {\n                if (menu !== expandedMenu) menu.minimize();\n            });\n            component.root.classList.add(\"open\");\n        });\n\n        this.root.addEventListener('minimized', function (event) {\n            component.root.classList.remove(\"open\");\n        });\n\n    }\n\n    expandMenu(offset) {\n        let activeMenu;\n        const component = this;\n        this.menus.some(function (menu, i) {\n            if (menu.buttonElement.getAttribute('aria-expanded') === 'true') {\n                activeMenu = menu;\n                if (component.menus[i + offset]) {\n                    component.menus[i + offset].expand();\n                    return true;\n                }\n            }\n        });\n    }\n}\n\n"],"file":"MegaMenu.js"}